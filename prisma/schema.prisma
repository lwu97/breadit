// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  username          String?        @unique
  image             String?
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  commentVotes      CommentVote[]
  votes             Vote[]
  subscriptions     Subscription[]
  createdSubreddits Subreddit[]    @relation("CreatedBy")
}

model Subreddit {
  id          String         @id @default(cuid())
  name        String         @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       Post[]
  creatorId   String?
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  subredditId String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  @@id([userId, subredditId])
  @@index([userId])
  @@index([subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subredditId String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  votes       Vote[]

  @@index([subredditId])
  @@index([authorId])
}

model Comment {
  id        String        @id @default(cuid())
  text      String        @db.Text
  createdAt DateTime      @default(now())
  authorId  String
  author    User          @relation(fields: [authorId], references: [id])
  postId    String
  post      Post          @relation(fields: [postId], references: [id])
  replyToId String?
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  userId String
  user   User     @relation(fields: [userId], references: [id])
  postId String
  post   Post     @relation(fields: [postId], references: [id])
  type   VoteType

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model CommentVote {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  type      VoteType

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
